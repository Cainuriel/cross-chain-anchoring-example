/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AnchorContract {
  export type BlockInfoStruct = {
    blockNumber: BigNumberish;
    blockHash: BytesLike;
    stateRoot: BytesLike;
    timestamp: BigNumberish;
    chainName: string;
  };

  export type BlockInfoStructOutput = [
    blockNumber: bigint,
    blockHash: string,
    stateRoot: string,
    timestamp: bigint,
    chainName: string
  ] & {
    blockNumber: bigint;
    blockHash: string;
    stateRoot: string;
    timestamp: bigint;
    chainName: string;
  };
}

export interface AnchorContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "anchorBlock"
      | "anchoredBlocks"
      | "anchoredChainName"
      | "blockByNumber"
      | "getAnchoredBlock"
      | "getLastAnchoredBlock"
      | "getLastNBlocks"
      | "getStats"
      | "lastAnchoredBlock"
      | "owner"
      | "thisChainName"
      | "totalAnchors"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BlockAnchored" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "anchorBlock",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "anchoredBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "anchoredChainName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockByNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnchoredBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastAnchoredBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastNBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getStats", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastAnchoredBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "thisChainName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAnchors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "anchorBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anchoredBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anchoredChainName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockByNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnchoredBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastAnchoredBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastNBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStats", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastAnchoredBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "thisChainName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAnchors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace BlockAnchoredEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    blockHash: BytesLike,
    stateRoot: BytesLike,
    chainName: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    blockNumber: bigint,
    blockHash: string,
    stateRoot: string,
    chainName: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    blockNumber: bigint;
    blockHash: string;
    stateRoot: string;
    chainName: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AnchorContract extends BaseContract {
  connect(runner?: ContractRunner | null): AnchorContract;
  waitForDeployment(): Promise<this>;

  interface: AnchorContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  anchorBlock: TypedContractMethod<
    [_blockNumber: BigNumberish, _blockHash: BytesLike, _stateRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  anchoredBlocks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string] & {
        blockNumber: bigint;
        blockHash: string;
        stateRoot: string;
        timestamp: bigint;
        chainName: string;
      }
    ],
    "view"
  >;

  anchoredChainName: TypedContractMethod<[], [string], "view">;

  blockByNumber: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string] & {
        blockNumber: bigint;
        blockHash: string;
        stateRoot: string;
        timestamp: bigint;
        chainName: string;
      }
    ],
    "view"
  >;

  getAnchoredBlock: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [AnchorContract.BlockInfoStructOutput],
    "view"
  >;

  getLastAnchoredBlock: TypedContractMethod<
    [],
    [AnchorContract.BlockInfoStructOutput],
    "view"
  >;

  getLastNBlocks: TypedContractMethod<
    [_count: BigNumberish],
    [AnchorContract.BlockInfoStructOutput[]],
    "view"
  >;

  getStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, string, string] & {
        _totalAnchors: bigint;
        _lastAnchoredBlock: bigint;
        _thisChain: string;
        _anchoredChain: string;
      }
    ],
    "view"
  >;

  lastAnchoredBlock: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  thisChainName: TypedContractMethod<[], [string], "view">;

  totalAnchors: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "anchorBlock"
  ): TypedContractMethod<
    [_blockNumber: BigNumberish, _blockHash: BytesLike, _stateRoot: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "anchoredBlocks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string] & {
        blockNumber: bigint;
        blockHash: string;
        stateRoot: string;
        timestamp: bigint;
        chainName: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "anchoredChainName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "blockByNumber"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string] & {
        blockNumber: bigint;
        blockHash: string;
        stateRoot: string;
        timestamp: bigint;
        chainName: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAnchoredBlock"
  ): TypedContractMethod<
    [_blockNumber: BigNumberish],
    [AnchorContract.BlockInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastAnchoredBlock"
  ): TypedContractMethod<[], [AnchorContract.BlockInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "getLastNBlocks"
  ): TypedContractMethod<
    [_count: BigNumberish],
    [AnchorContract.BlockInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string, string] & {
        _totalAnchors: bigint;
        _lastAnchoredBlock: bigint;
        _thisChain: string;
        _anchoredChain: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastAnchoredBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "thisChainName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAnchors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BlockAnchored"
  ): TypedContractEvent<
    BlockAnchoredEvent.InputTuple,
    BlockAnchoredEvent.OutputTuple,
    BlockAnchoredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "BlockAnchored(uint256,bytes32,bytes32,string,uint256)": TypedContractEvent<
      BlockAnchoredEvent.InputTuple,
      BlockAnchoredEvent.OutputTuple,
      BlockAnchoredEvent.OutputObject
    >;
    BlockAnchored: TypedContractEvent<
      BlockAnchoredEvent.InputTuple,
      BlockAnchoredEvent.OutputTuple,
      BlockAnchoredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
